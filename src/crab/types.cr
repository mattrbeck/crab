alias Byte = UInt8
alias Word = UInt32
alias Words = Slice(UInt32)

enum Instr
  DATA_PROCESSING_PSR_TRANSFER
  MULTIPLY
  MULTIPLY_LONG
  SINGLE_DATA_SWAP
  BRANCH_EXCHANGE
  HALFWORD_DATA_TRANSFER_REGISTER_OFFSET
  HALFWORD_DATA_TRANSFER_IMMEDIATE_OFFSET
  SINGLE_DATA_TRANSFER
  UNDEFINED
  BLOCK_DATA_TRANSFER
  BRANCH
  COPROCESSOR_DATA_TRANSFER
  COPROCESSOR_DATA_OPERATION
  COPROCESSOR_REGISTER_TRANSFER
  SOFTWARE_INTERRUPT

  def self.from_hash(hash : Word) : Instr
    if hash & 0b111100000000 == 0b111100000000
      SOFTWARE_INTERRUPT
    elsif hash & 0b111100000001 == 0b111000000001
      COPROCESSOR_REGISTER_TRANSFER
    elsif hash & 0b111100000001 == 0b111000000001
      COPROCESSOR_DATA_OPERATION
    elsif hash & 0b111000000000 == 0b110000000000
      COPROCESSOR_DATA_TRANSFER
    elsif hash & 0b111000000000 == 0b101000000000
      BRANCH
    elsif hash & 0b111000000000 == 0b100000000000
      BLOCK_DATA_TRANSFER
    elsif hash & 0b111000000001 == 0b011000000001
      UNDEFINED
    elsif hash & 0b110000000000 == 0b010000000000
      SINGLE_DATA_TRANSFER
    elsif hash & 0b111001001001 == 0b000001001001
      HALFWORD_DATA_TRANSFER_IMMEDIATE_OFFSET
    elsif hash & 0b111001001001 == 0b000000001001
      HALFWORD_DATA_TRANSFER_REGISTER_OFFSET
    elsif hash & 0b111111111111 == 0b000100100001
      BRANCH_EXCHANGE
    elsif hash & 0b111110111111 == 0b000100001001
      SINGLE_DATA_SWAP
    elsif hash & 0b111110001111 == 0b000010001001
      MULTIPLY_LONG
    elsif hash & 0b111111001111 == 0b000000001001
      MULTIPLY
    elsif hash & 0b110000000000 == 0b000000000000
      DATA_PROCESSING_PSR_TRANSFER
    else
      raise "Unimplemented from_hash #{hex_str hash}"
    end
  end
end
